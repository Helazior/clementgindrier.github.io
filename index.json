[{"categories":["article"],"content":"I've reported and exploited a critical vulnerability in the Izly application that allows anyone to pay for a meal with just their phone number.","date":"14-10-2023","objectID":"/posts/vulnerabilite-izly/","tags":["vulnerability","computer science"],"title":"Vulnerability in the QR Code of the Izly phone application","uri":"/posts/vulnerabilite-izly/"},{"categories":["article"],"content":"Vulnerability in the QR Code of the Izly phone application By Clément Gindrier  PDF version ","date":"14-10-2023","objectID":"/posts/vulnerabilite-izly/:1:0","tags":["vulnerability","computer science"],"title":"Vulnerability in the QR Code of the Izly phone application","uri":"/posts/vulnerabilite-izly/"},{"categories":["article"],"content":"Abstract : Izly is a smartphone application for paying for meals in university restaurants in France. It is downloaded and used by millions of people. The paper analyzes a critical vulnerability that I reported, as well as the patch that was applied. This zero-click vulnerability affected all phones, on all versions of the application, and made it possible to break the main functionality of the application without leaving any trace. It allowed users to have all their meals paid for by other people using only their phone numbers, without them being able to do anything about it. During my analysis, I was warned that other students had, 4 years earlier, found this vulnerability. This meant that it had been present for at least as long. Although The vulnerability had not been reported by these student. I reported the vulnerability to the Izly developers on October 26, 2022 with the email: support.izly@s-money.fr which appears on the Play Store (no other contact is available on the site). Then, seeing that they didn’t reply, I sent a report to ANSSI on December 1, 2022 via the email they gave on their site: cert-fr@ssi.gouv.fr with their PGP key, and they replied immediately. The vulnerability was corrected from April 15 to 26, 2023 with a forced update. Izly never contacted me for help or threats, but ANSSI confirmed that it was following my complaint that the application was patched. Frise chronologique ","date":"14-10-2023","objectID":"/posts/vulnerabilite-izly/:1:1","tags":["vulnerability","computer science"],"title":"Vulnerability in the QR Code of the Izly phone application","uri":"/posts/vulnerabilite-izly/"},{"categories":["article"],"content":"Vulnerability and exploitation An attacker can get someone else to pay for all his university restaurant meals, knowing only the victim’s telephone number. Needed for the attacker : The victim’s telephone number The victim must have enough money in his Izly account The attack is based on the fact that the QR Code generated by the Izly application to pay uses an HMAC as protection, which is never verified by the server. The QR Code is generated offline. This means that the QR Code is not protected, and the text can be modified. QR Code text: AIZ; -\u003e QR Code type 33601234567; -\u003e editable phone number 2022-11-26 20:11:51; -\u003e Date and time of QR Code creation 3; -\u003e QR Code type's Number 141739b44f3c79e8cdee7896b87b6d46f0a6e042 -\u003e HMAC of previous information In conclusion, all you need to do is : Enter the victim’s telephone number in the correct format (33 instead of 0 at the beginning). Set the time at which you will pay (UTC+0), as the QR Code expires in a few minutes. Set any HMAC, as it will not be checked. You can even leave it out. Then generate the QR Code, pass it in front of the scanner like a normal Izly QR Code, and the person with that number will pay. The attack can be automated with an application that has the same interface as Izly’s, for greater discretion. ","date":"14-10-2023","objectID":"/posts/vulnerabilite-izly/:1:2","tags":["vulnerability","computer science"],"title":"Vulnerability in the QR Code of the Izly phone application","uri":"/posts/vulnerabilite-izly/"},{"categories":["article"],"content":"Vulnerability impact Victim: Cannot protect herself against the attacks except by removing her money from the application and stopping using the application She can only see the payment history to realize that she has lost money The attacker: He cannot be tracked, since no information about him is sent. He can’t be caught in the act, since at the checkout, only the victim’s balance appears in addition to the receipt. No one can guess that he’s not paying for himself. The attack works without any action on the part of the victim. All he needs is a telephone number containing money on the Izly account. He can try several numbers to see the remaining balance at the cash register. Anyone can use the vulnerability in a matter of seconds, without any computer knowledge The vulnerability therefore seems critical. Personally I don’t know any victims or people who have complained about it. Although Izly hasn’t communicated on it. So I don’t know the real impact this vulnerability has had. ","date":"14-10-2023","objectID":"/posts/vulnerabilite-izly/:1:3","tags":["vulnerability","computer science"],"title":"Vulnerability in the QR Code of the Izly phone application","uri":"/posts/vulnerabilite-izly/"},{"categories":["article"],"content":"Proof of Concept: I cannot do a demonstration here (although I’ve done it before in university restaurants), but I can prove the bug with the code of the APK. Application code: The application’s decompiled code with Jadx shows that the HMAC is generated with a key based on the number of QR Code creations by the user. However, we can generate QR Codes offline, and therefore locally, without any communication with the server. The server cannot therefore be aware of the key, and therefore of the hash. The information is therefore unprotected, as it cannot be verified by the server. QR Code text generation function Here we see that the HMAC key key line 11 is generated in the Getkey function line 2. Key text generation function We can see in the GetKey function that the sharedPreferences “sharedPrefHotpCounter” is retrieved, and will then be transformed a little to make it the key. Initialize to 0 The sharedPreferences “sheredPrefHotpCounter” is initialized to 0 here, then incremented by 1 each time a QR Code is created (in the function that generates the HMAC key). Increment These are the only places where this sharedPreferences is modified. Tests : It’s possible to modify the hash, and even all the QR Code information as long as you remain consistent with the format, then regenerate the QR Code and see that it’s still possible to pay. In this way, you can generate the entire QR Code with any number without needing the Izly application. So I automated the process on a new Kotlin application with the same interface, choosing from my contacts who would pay. ","date":"14-10-2023","objectID":"/posts/vulnerabilite-izly/:1:4","tags":["vulnerability","computer science"],"title":"Vulnerability in the QR Code of the Izly phone application","uri":"/posts/vulnerabilite-izly/"},{"categories":["article"],"content":"Patch As of April 15, 2023, a forced update of Izly has been released fixing the vulnerability. QR Code text : AIZ; -\u003e QR Code type a87f7661-7be9-4381-a423-67c238bb3dde; -\u003e UUID 2023-07-08 15:58:24; -\u003e Code creation date and time 3; -\u003e Code type number 73d9c0958d315640c90292c6e92f05920552d307; -\u003e HmacSHA1 not checked MEYCIQCcLB40kgofoTlawlX7RX4eMOig/dTrfJYdl -\u003e Signature SHA256 with ECDSA iJQpUSJEgIhAIfYfs0ovSErPdGloQ7gI61kG/atwV sjmckX5hr+Uq5M 2 lines have changed: the telephone number that identified the customer has been replaced by a version 4 UUID, i.e. a random number. A new SHA256 signature with ECDSA has been added to guarantee data integrity. Reproduce the exploit To reproduce the exploit, we now need to know the victim’s UUID and private key. We can verify this by modifying the application used to exploit the previous vulnerability. We recover our private key using the Frida tool, then reimplement the signature as Izly does, to obtain a valid QR Code again, according to openssl. public java.lang.String signature(@org.jetbrains.annotations.NotNull java.lang.String textToSign, org.jetbrains.annotations.NotNull java.lang.String key) { java.security.PrivateKey privateKey = java.security.KeyFactory.getInstance(\"EC\", new org.spongycastle.jce .provider.BouncyCastleProvider()) .generatePrivate( new java.security.spec.PKCS8EncodedKeySpec( android.util.Base64.decode(key, 0))); java.security.Signature signature = java.security.Signature.getInstance(\"SHA256withECDSA\"); signature.initSign(privateKey); byte[] bytes = textToSign.getBytes(p000.C2403pe.utf8); signature.update(bytes); java.lang.String encodeToString = android.util.Base64.encodeToString(signature.sign(), 2); return encodeToString; } And then we check that the QR Code works by paying with it in a university restaurant. And it works. To retrieve someone’s UUID, we could: Take photo of the QR Code of someone Hack Izly’s database To recover someone’s private key, we could: Have access one time to the account Hack Izly’s database Unless there are other vulnerabilities in private key generation, the patch seems effective. The patch has also secured other parts of Izly. For example, it was previously possible to access developer API documentation at https://www.izly.com. ","date":"14-10-2023","objectID":"/posts/vulnerabilite-izly/:1:5","tags":["vulnerability","computer science"],"title":"Vulnerability in the QR Code of the Izly phone application","uri":"/posts/vulnerabilite-izly/"},{"categories":["article"],"content":"Conclusion This paper shows that vulnerabilities still exist in simple mechanisms, and that it is sometimes worth testing them. ","date":"14-10-2023","objectID":"/posts/vulnerabilite-izly/:1:6","tags":["vulnerability","computer science"],"title":"Vulnerability in the QR Code of the Izly phone application","uri":"/posts/vulnerabilite-izly/"},{"categories":["article"],"content":"Is privacytests.org the solution to find a browser that respects your privacy?","date":"03-02-2023","objectID":"/posts/privacytests/","tags":["privacy","computer science"],"title":"Overview Of Privacytests.org","uri":"/posts/privacytests/"},{"categories":["article"],"content":"It is difficult to know which browser really respects your privacy, the subject is complex and the truth hard to find. Only one website so far allows you to easily compare the privacy of browsers, it is privacytests.org created by Arthur Edelstein. It is questionable whether a simple comparison table is reliable for comparing browsers. Indeed, the website is becoming famous and has a real impact on the decision of users and browsers. Yet, to my knowledge, there is no in-depth paper or video that looks at the subject. This article therefore aims to understand the website and analyze it: What do the tests? Are they biased? Reproducible? Relevant? What are the site’s reviews and are they relevant?  Read the paper ","date":"03-02-2023","objectID":"/posts/privacytests/:0:0","tags":["privacy","computer science"],"title":"Overview Of Privacytests.org","uri":"/posts/privacytests/"},{"categories":null,"content":"About me Passionate about sports and computers, I like to discover the world and push my limits. I often undertake personal challenges and projects that may interest others as well as myself later on. Indeed, it is useful for me to be able to quickly find projects and resources that I have written, it saves me time. Moreover, this site is a motivation that shows me how far I have come during all these years. And finally, it trains me to write articles and to popularize my work, in French as well as in English. ","date":"02-12-2022","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"My website So I wanted to write a site to share my personal projects. This site is made with Hugo and the LoveIt template under the creative commons license. It is hosted on my GitHub. ","date":"02-12-2022","objectID":"/about/:1:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Ressources My email address: helazior[at]protonmail.com PGP key ","date":"02-12-2022","objectID":"/about/:1:1","tags":null,"title":"About me","uri":"/about/"}]